<!doctype html>
<html>
  <head>
   <!--  <style type="text/css" src="style.css"></style> -->
    <meta charset='utf-8' />
    <title>tabi.io</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.27.0/mapbox-gl.js'></script>
    <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/themes/smoothness/jquery-ui.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js"></script>
    <script>
      $(document).ready(function() {
      $("#datepicker").datepicker();
      });
    </script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.27.0/mapbox-gl.css' rel='stylesheet' />
    <link rel="stylesheet" type="text/css" href="/styles.css">
  </head>
  <body>
    <!-- <div id="sidebar pad2"> </div> -->
    <!-- <div class='sidebar'>
      <div class='heading'>
        <h1>Our locations</h1>
      </div>
      <div id='listings' class='listings'></div>
    </div> -->
    <nav id="header" class="navbar navbar-">
  <div class="container-fluid">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="#"></a>
     <!--  <img alt="Brand" src="http://freevector.co/wp-content/uploads/2012/02/52116-paper-airplane-symbol.png"> -->
    </div>
</nav>

  <div class="col-xs-3">
    
    <div id = "transparent-well" class="well well-lg">
       <label id = "prompt">enter your travel: information: </label>

     <br>
     <br>

    <div class="form-group">

      <label for="departing">departing from: </label>
        <select multiple class="form-control" id="departing">
          <script>
          var geo = navigator.geolocation;
          geo.getCurrentPosition(function(position) {
            nearestAirport(position.coords.latitude, position.coords.longitude, 3, function(data) {
              $('#option1').text(data[0].airport)
              $('#option2').text(data[1].airport)
              $('#option3').text(data[2].airport)
            })
          });
          </script>
          <option id='option1'></option>
          <option id='option2'></option>
          <option id='option3'></option>
        </select>

      <br>

      <label for="datepicker">departure date: </label>
        <input id="datepicker"/>

      <br>
      <br>

      <label for="duration">duration (in days): </label>
        <input class="form-control" type="number" value="1" id="duration">

      <br>

       <label for="budget">total budget(in dollars):</label>
        <div class="input-group">
          <div class="input-group-addon">$
          </div>
            <input type="text" class="form-control" id="budget" placeholder="Amount">
          <div class="input-group-addon">.00
          </div>
        </div>

      <br>

      <button onclick="getCities()" type="submit" name="button" class="btn btn-default">submit</button>

      <br>

       <a id="about" href="#">about</a>
       <a id="help" href="#">help</a>
    </div>
   </div>
  </div>

  <div id='map' class='map pad2'>
    <div id="header">

    </div>
  </div>
  <script>
    var geo = navigator.geolocation // Set up location services
    geo.getCurrentPosition(function(position) {
      flyToStore([position.coords.longitude, position.coords.latitude]);
    });
    var stores = {
      "type": "FeatureCollection",
      "features": [
        {
          "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [-122.27274699999998, 37.8715926]
          },
          "properties": {
            "address": "2094 12th Ave",
            "city": "San Francisco",
            "country": "United States",
            "postalCode": "94116",
            "state": "CA"
          }
        }
      ]
    }
    var layers = [];

    mapboxgl.accessToken = 'pk.eyJ1IjoiZGF2aWRrYy0iLCJhIjoiY2l2MGhsM2Q5MDVqYzJvcGQ5ODMzemZxaiJ9.sdo-IMgy5aHNUoqD_-C_Ww';
    var map = new mapboxgl.Map({
       container: 'map', // container id
       style: 'mapbox://styles/davidkc-/civezf9mr000m2juz3el3dr2p', //stylesheet location
       center: [-97, 40], // starting position
       zoom: 1 // starting zoom
    });

    function getRandom(min, max) {
      min = Math.ceil(min);
      max = Math.floor(max);
      return Math.floor(Math.random() * (max - min)) + min;
    }

    function wait(ms) {
      var start = new Date().getTime();
      var end = start;
      while(end < start + ms) {
        end = new Date().getTime();
      }
    }

    function createMarker(coordinate, id) {
      stores.features[0].geometry.coordinates = coordinate;
      layers.push(id)
      map.addSource(id, {
        type: 'geojson',
        data: stores
      });
      map.addLayer({
        id: id,
        type: 'symbol',
        source: id,
        layout: {
          'icon-image': 'airport-15',
          'icon-allow-overlap': true
        }
      });
    }

    // Add an event listener for when a user clicks on the map
    map.on('click', function(e) {
        // Query all the rendered points in the view
        var features = map.queryRenderedFeatures(e.point, { layers: ['locations'] });
        if (features.length) {
          var clickedPoint = features[0];
          // 1. Fly to the point
          flyToStore(clickedPoint.geometry.coordinates);
          // 2. Close all other popups and display popup for clicked store
          createPopUp(clickedPoint);
          // 3. Highlight listing in sidebar (and remove highlight for all other listings)
          var activeItem = document.getElementsByClassName('active');
          if (activeItem[0]) {
            activeItem[0].classList.remove('active');
          }
          // Find the index of the store.features that corresponds to the clickedPoint that fired the event listener
          var selectedFeature = clickedPoint.properties.address;
          for (var i = 0; i < stores.features.length; i++) {
            if (stores.features[i].properties.address === selectedFeature) {
              selectedFeatureIndex = i;
            }
          }
          // Select the correct list item using the found index and add the active class
          var listing = document.getElementById('listing-' + selectedFeatureIndex);
          listing.classList.add('active');
        }
      });

    function createPopUp(currentFeature) {
      var popUps = document.getElementsByClassName('mapboxgl-popup');
      // Check if there is already a popup on the map and if so, remove it
      if (popUps[0]) popUps[0].remove();

      var popup = new mapboxgl.Popup({ closeOnClick: false })
        .setLngLat(currentFeature.geometry.coordinates)
        .setHTML('<h3>Sweetgreen</h3>' +
          '<h4>' + currentFeature.properties.address + '</h4>')
        .addTo(map);
    }

    function flyToStore(coordinates) {
      map.flyTo({
        center: coordinates, // [longitude, latitude]
        zoom: 9,
        speed: 0.9
      });
    }

    function nearestAirport(latitude, longitude, numOfAirports, callback) {
      var closestAirports = [{
        'city' : '',
        'lat' : '',
        'long' : '',
        'airport' : '',
        'airportName' : ''
      },
      {
        'city' : '',
        'lat' : '',
        'long' : '',
        'airport' : '',
        'airportName' : ''
      },
      {
        'city' : '',
        'lat' : '',
        'long' : '',
        'airport' : '',
        'airportName' : ''
      }];
      $.ajax({
        url: 'http://api.sandbox.amadeus.com/v1.2/airports/nearest-relevant?latitude=' + latitude + '&longitude=' + longitude,
        data: {
          apikey: 'eQ0LUMGXplEM91Ze7Jnis2iOl46bb2WM'
        },
        success: function (response) {
          for (i = 0; i < numOfAirports; i++) {
            closestAirports[i].airport = response[i].airport;
            closestAirports[i].airportName = response[i].airport_name;
            closestAirports[i].city = response[i].city_name;
            closestAirports[i].lat = response[i].location.latitude;
            closestAirports[i].long = response[i].location.longitude;
          }
          return callback(closestAirports)
        },
        error: function (xhr, status, error) {
          console.error('whoops: ' + error);
          callback(error)
        }
      });
    }

    function getCities(){ // Get cities from user parameters
      if (layers.length > 0) {
        while (layers.length > 0) {
          try {
            map.removeSource(layers[layers.length - 1])
            map.removeLayer(layers[layers.length - 1])
            layers.pop()
          }
          catch(err) {
            console.log(err)
          }
        }
        console.log(layers)
      }
      var rawDate = document.getElementById('datepicker').value;
      rawDate = rawDate.split('/')
      var date = rawDate[2] + '-' + rawDate[0] + '-' + rawDate[1];
      getDestinations(document.getElementById('departing').value,
                               date,
                               document.getElementById('duration').value,
                               document.getElementById('budget').value);
    };

    function getDestinations(airport, departureDate, duration, maxPrice) {
      $.ajax({
        url: 'http://api.sandbox.amadeus.com/v1.2/flights/inspiration-search?origin=' + airport + '&departure_date=' + departureDate + '&duration=' + duration + '&max_price=' + maxPrice,
        data: {
          apikey: 'eQ0LUMGXplEM91Ze7Jnis2iOl46bb2WM'
        },
        success: function (response) {
          // var cities = [];
          var random = 1;
          for (i = 0; i < 20; i++) {
            // cities.push(response.results[i].destination)
            random = getRandom(0, response.results.length)
            try {
              getCoordinates(response.results[random].destination)
            }
            catch(err) {
              console.log("error: ")
              console.log(err)
            }
          }
          getCoordinates(document.getElementById('departing').value)
          wait(2000)
          map.flyTo({zoom: 6, speed: .4})
        },
        error: function (xhr, status, error) {
          console.error('whoops: ' + error);
        }
      });
    }

    function getCoordinates(airport) {
      $.ajax({
        url: 'http://api.sandbox.amadeus.com/v1.2/location/' + airport,
        data: {
          apikey: 'eQ0LUMGXplEM91Ze7Jnis2iOl46bb2WM'
        },
        success: function (response) {
          // destinationInfo.city = response.city.name;
          // destinationInfo.lat = response.airports[0].location.latitude;
          // destinationInfo.long = response.airports[0].location.longitude;
          // destinationInfo.airport = response.airports[0].name;

          createMarker([response.airports[0].location.longitude, response.airports[0].location.latitude], response.airports[0].name)
        },
        error: function (xhr, status, error) {
          console.error('whoops: ' + error);
        }
      });
    }

    // createMarker()
    // getCoordinates("SFO")
    // getDestinations("SFO", "2016-12-19", "6", "1200")
    // nearestAirport(37.857507, -122.318001)
    </script>
  </body>
</html>
